"use client";

/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/R5vUQNerJpc
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { AvatarImage, AvatarFallback, Avatar } from "@/components/ui/avatar"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import React, { useState } from 'react';

function Component() {
  const clickHandler = (params, e) => {
    console.log(params); // error
    e.preventDefault();
    
    function sendData(params) {
      var data1 = params

      function myFunc(query, answer) {
        var typingBoolQuery = false;
        var typingBool = false;
        var typingIdxQuery = 0;
        var typingIdx = 0;
        var typingTxtQuery = query.toString();
        var typingTxt = answer.toString(); // 타이핑될 텍스트를 가져온다
        typingTxt = typingTxt.split(""); // 한글자씩 자른다.
        document.getElementById("answer").innerHTML = document.getElementById("answer").innerHTML+'</br>'
        document.getElementById("query").innerHTML = document.getElementById("query").innerHTML+'</br>'
        
        if (typingBoolQuery == false && typingBool == false) {
          // 타이핑이 진행되지 않았다면
          typingBoolQuery = true;
          typingBool = true;
          var tyIntQuery = setInterval(typingQuery, 100); // 반복동작
          var tyInt = setInterval(typing, 100); // 반복동작
        }

        function typingQuery() {
          if (typingIdxQuery < typingTxtQuery.length) {
            // 타이핑될 텍스트 길이만큼 반복
            document.getElementById("query").append(typingTxtQuery[typingIdxQuery]); // 한글자씩 이어준다.
            typingIdxQuery++;
          } else {
            clearInterval(tyIntQuery); //끝나면 반복종료
          }
        }
        function typing() {
          if (typingIdx < typingTxt.length) {
            // 타이핑될 텍스트 길이만큼 반복
            document.getElementById("answer").append(typingTxt[typingIdx]); // 한글자씩 이어준다.
            typingIdx++;
          } else {
            clearInterval(tyInt); //끝나면 반복종료
          }
        }
      };
    
      const url = "http://127.0.0.1:5000/api"; // Your API endpoint
      const data = { data1: data1 };
      console.log(data)
      // console.log(location.origin);
    
      fetch(url, {
        method: 'POST',   // or 'PUT'
        // mode: 'no-cors',
        headers: {
          "Access-Control-Allow-Origin": '*',
          'Content-Type': "application/json",
        },
        body: JSON.stringify(data)
        })
        .then((res) => res.json())
        .then(res => {
          console.log(res);
          console.log('Success:', res["key"]);  // Handle the response data
          myFunc(idValue, res["key"])
        })
        .catch((error) => {
            console.error('Error:', error);
        });
    } 
    
    sendData(params=params)
  }

  const [idValue, setId] = useState('');
  const saveUserId = event => {
    setId(event.target.value);
    // console.log(event.target.value);
  };
  return (
    <div className="flex flex-col h-[90vh] max-h-[90vh] bg-gray-100 dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
      <header className="flex items-center px-4 py-3 bg-gray-900 dark:bg-gray-950 text-white">
        <div className="flex items-center space-x-3">
          <Avatar>
            <AvatarImage alt="Chatbot" src="/chatbot-avatar.png" />
            <AvatarFallback>CB</AvatarFallback>
          </Avatar>
          <h2 className="text-lg font-medium">Chatbot</h2>
        </div>
      </header>
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        <div className="flex items-start space-x-3">
          <Avatar>
            <AvatarImage alt="Chatbot" src="/chatbot-avatar.png" />
            <AvatarFallback>CB</AvatarFallback>
          </Avatar>
          <div className="bg-white dark:bg-gray-950 dark:text-gray-200 rounded-lg p-3 max-w-[70%]">
            <p id="answer">Hello! How can I assist you today?</p>
          </div>
        </div>
        <div className="flex items-start space-x-3 justify-end">
          <div className="bg-blue-500 text-white rounded-lg p-3 max-w-[70%]">
            <p id = "query">Hi there! I have a few questions about your product.</p>
          </div>
          <Avatar>
            <AvatarImage alt="User" src="/user-avatar.png" />
            <AvatarFallback>U</AvatarFallback>
          </Avatar>
        </div>
      </div>
      <div className="bg-gray-100 dark:bg-gray-950 px-4 py-3 flex items-center space-x-2">
        <Input className="flex-1" placeholder="Type a message" id="inputbox" value={idValue} onChange={saveUserId}/>
        <Button type="submit" onClick={(e)=>{(clickHandler(idValue, e))}}>Send</Button>
      </div>
    </div>
  );
}

export { Component };